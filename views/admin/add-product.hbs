<section  class="d-flex justify-content-center mb-5" >
  <div class=" container row  d-flex justify-content-center ">
    <div class="ml-5 col-md-6">
      <h2 class="text-center my-5 ">Add Products</h2>
      <form id="productAdd" class="d-flex aling-item-center flex-column" action="/admin/add-product" method="post"   enctype="multipart/form-data">
        <div class="form-outline ">   
          <input  id="prodname" type="text" name="product_name" class="form-control mb-3" placeholder="Name" >
          <i class="fas fa-check-circle"></i>
          <i class="fas fa-exclamation-circle"></i>
          <small>Error message</small>
        </div>
        <div class="form-outline ">
          <input id="price" type="number" name="price" class="form-control mb-3" placeholder="Price" >
          <i class="fas fa-check-circle"></i>
          <i class="fas fa-exclamation-circle"></i>
          <small>Error message</small>
      </div>  
      <div class="form-outline ">
        <textarea type="text" id="discription" name="discription" class="form-control mb-3" placeholder="discription" rows="3"></textarea>
        <i class="fas fa-check-circle"></i>
        <i class="fas fa-exclamation-circle"></i>
        <small>Error message</small>
      </div>
      <div class="form-outline ">
        <input type="text" id="stock" name="stock" class="form-control mb-3" placeholder="Stock" > 
        <i class="fas fa-check-circle"></i>
        <i class="fas fa-exclamation-circle"></i>
        <small>Error message</small>
      </div>
      <input id="inputImage" type="file" name="image" class="form-control mb-3 image" accept="image/*" >
        <div class="modal fade" id="cropModel" tabindex="-1" role="dialog" aria-labelledby="modalLabel" aria-hidden="true">
          <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="modalLabel">Crop image</h5>
                  <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
              </div>
              <div class="modal-body">
                <div class="img-container">
                  <div class="row">
                    <div class="col-md-7">  
                      <img id="image">
                    </div>
                    <div class="col-md-4">
                      <div class="preview"></div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <label type="button" class="btn btn-primary" id="upload" for="reinputImage">
                  <i class='bx bx-cloud-upload'></i>
                  <input type="file" name="input" id="reinputImage" style="display:none ; " accept="image/*">
                </label> 
                <button type="button" class="btn btn-primary" id="reset"><i class='bx bx-reset text-white'></i></button>
                <button type="button" class="btn btn-primary" id="rotateLeft"><i class='bx bx-rotate-left text-white'></i></button>
                <button type="button" class="btn btn-primary" id="rotateRight"><i class='bx bx-rotate-right text-white'></i></button>
                <button type="button" class="btn btn-primary" id="crop">Crop</button>
              </div>
            </div>
          </div>
        </div>
        <div class="mb-3">
          <select class="form-select text-center bg-outline"  aria-label="Default select example" name="category">
            <option>Category</option>
            {{#each category}}
              <option>{{this.name}}</option>
            {{/each}}
          </select>
        </div>
        <button type="submit" class="btn mt-1 nav-btn" >Submit</button> 
      </form>
    </div>
  </div>
</section>

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>

<script>
  var reupload = document.getElementById("reinputImage")
  var reset =document.getElementById("reset")
  var rotateLeft = document.getElementById("rotateLeft")
  var rotateRight = document.getElementById("rotateRight")
  var bs_modal = $('#cropModel');
  var image = document.getElementById('image');
  var inputImage = document.getElementById("inputImage")
  var cropper,reader,file;
  reupload.addEventListener("change",(action)=>{
    let resetFile = action.target.files;
    if (resetFile && resetFile.length > 0) {
      if(file.type.split('/')[0] === 'image'){
        var newfile = resetFile[0];
        if (URL) {
          url= URL.createObjectURL(newfile);
          image.url=url
          cropper.replace(url)
        } 
        else if (FileReader) {
          reader = new FileReader();
          reader.onload = function(action) {
            done(reader.result);
          };
          reader.readAsDataURL(newfile);
        }
      }
      else{
        alert("Plees choos a image")
      }  
    }
  })
  var done = function(url) {
    console.log(url)
      image.src = url;
      bs_modal.modal('show');
  };
  $("body").on("change", ".image", function(e) {
    var files = e.target.files;
    if (files && files.length > 0) {
      file = files[0];     
      if(file.type.split('/')[0] === 'image'){
        if (URL) {
          done(URL.createObjectURL(file));
        } 
        else if (FileReader) {
          reader = new FileReader();
          reader.onload = function(e) {
            done(reader.result);
          };
          reader.readAsDataURL(file);
        }
      }
      else{
        alert("Plees choos a image file")
      }
    }
  });
  bs_modal.on('shown.bs.modal', function() {
    cropper = new Cropper(image, {
      aspectRatio: NaN,
      viewMode: 3,
      preview: '.preview'
    });
  }).on('hidden.bs.modal', function(){
    cropper.destroy();
    cropper = null;
  });
  rotateLeft.addEventListener("click",()=>{
    cropper.rotate(-45)
  })
  rotateRight.addEventListener("click",()=>{
    cropper.rotate(45)
  })
  reset.addEventListener("click",()=>{
    cropper.reset()
  })
  $("#crop").click(function() {
    canvas = cropper.getCroppedCanvas({
      width: 160,
      height: 160, 
    }).toDataURL()
    let imageName="croppedImage"
    cropper.getCroppedCanvas().toBlob((blob)=>{
      file= new File([blob],imageName,{type:"image/*"})
      const container = new DataTransfer();
      container.items.add(file)
      console.log(file)
      inputImage.files= container.files;
    })
    bs_modal.modal('hide');
  });
  const editform = document.getElementById("productAdd")
  const name = document.getElementById("prodname")
  const authname = document.getElementById("authname")
  const price = document.getElementById("price")
  const stock = document.getElementById("stock")
  const discription = document.getElementById("discription")
  editform.addEventListener("submit", (e) => {
    checkInput()
    let isSuccess = editform.querySelectorAll(".form-outline.success")
    let formoutline = editform.querySelectorAll(".form-outline")
    if (isSuccess) {
      if (formoutline.length == isSuccess.length) {
      } 
      else {
        e.preventDefault();
      }
    }
  })
  function checkInput() {
    const nameValue = name.value.trim()
    const authnameValue = authname.value.trim()
    const discriptionValue = discription.value
    const priceValue = price.value.trim()
    const stockValue = stock.value.trim()
    if (nameValue === '') {
      setErrorFor(name, 'Name connot be blank');
    } 
    else {
      setSuccessFor(name)
    }
    if (authnameValue === '') {
      setErrorFor(authname, 'author name cannot be blank');
    }
    else {
      setSuccessFor(authname);
    }
    if (discriptionValue === '') {
      setErrorFor(discription, 'discription cannot be blank');
    }
    else {
      setSuccessFor(discription);
    }
    if (priceValue === '') {
      setErrorFor(price, 'price cannot be blank');
    }
    else{
      setSuccessFor(price);
    }
    if (stockValue === '') {
      setErrorFor(stock, 'stock cannot be blank');
    }
    else{
      setSuccessFor(stock);
    }
  }
  function setErrorFor(input, message) {
    const formoutline = input.parentElement;
    const small = formoutline.querySelector('small');
    small.innerText = message;
    formoutline.className = 'form-outline error'
  }
  function setSuccessFor(input) {
    const formoutline = input.parentElement;
    formoutline.className = 'form-outline success'
  }
</script>